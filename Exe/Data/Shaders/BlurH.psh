
// Pixel shader output structure
struct PS_OUTPUT
{
    float4 Color   : COLOR0;
};


texture Tex0 : register(s0);

sampler2D diffuseSampler = sampler_state
{
	Texture = Tex0;
	AddressU = Clamp;
	AddressV = Clamp;
	AddressW = Clamp;
	MinFilter = Linear;
	MagFilter = Linear;
	MipFilter = Linear;	
};

// Global variables
float3 xScreenSize;

PS_OUTPUT ps_main( in float2 uv : TEXCOORD0  )
{
PS_OUTPUT Out;                             //create an output pixel
	#define WEIGHT_COUNT 6

	float weight[WEIGHT_COUNT] = { 0.9, 0.85, 0.70, 0.50, 0.25, 0.10 };

	float colorIntensity = 1.0f;
	float intensity = 1.0f;
	float2 pixelAspect = {1.0/xScreenSize.x, 1.0/xScreenSize.y};

    float4 Color = tex2D(diffuseSampler, uv);
	float mult = 1;
	for(int i=0; i<WEIGHT_COUNT; i++)
	{
		Color += tex2D(diffuseSampler, float2(uv.x-(intensity*pixelAspect.x*mult), uv.y)) * weight[i];	
		Color += tex2D(diffuseSampler, float2(uv.x+(intensity*pixelAspect.x*mult), uv.y)) * weight[i];
		mult = mult + 4;
	}
	Color /= WEIGHT_COUNT;
	Out.Color = Color * colorIntensity; 
	return Out;
}
